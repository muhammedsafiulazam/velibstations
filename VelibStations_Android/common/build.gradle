
plugins {
    id("kotlin-multiplatform")
    id("kotlinx-serialization")
    id("com.squareup.sqldelight")
}

kotlin {

    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('CommonKit')
            }
        }

        fromPreset(presets.jvm, 'android')
    }

    sourceSets["commonMain"].dependencies {
        implementation ("org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_stdlib_version")
        implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlinx_coroutines_version")

        implementation ("io.ktor:ktor-client:$ktor_version")
        implementation ("io.ktor:ktor-client-json:$ktor_version")
        implementation ("io.ktor:ktor-client-serialization:$ktor_version")

        implementation ("org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlin_serialization_version")
    }

    sourceSets["androidMain"].dependencies {
        implementation ("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_stdlib_version")
        implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version")

        implementation("io.ktor:ktor-client-android:$ktor_version")
        implementation ("io.ktor:ktor-client-json-jvm:$ktor_version")
        implementation ("io.ktor:ktor-client-serialization-jvm:$ktor_version")

        implementation ("com.squareup.sqldelight:android-driver:$sqldelight_version")
    }

    sourceSets["iosMain"].dependencies {
        implementation ("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_stdlib_version")
        implementation ("org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlinx_coroutines_version")

        implementation ("io.ktor:ktor-client-ios:$ktor_version")
        implementation ("io.ktor:ktor-client-json-native:$ktor_version")
        implementation ("io.ktor:ktor-client-serialization-native:$ktor_version")

        implementation ("org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$kotlin_serialization_version")

        implementation ("com.squareup.sqldelight:ios-driver:$sqldelight_version")
    }
}

sqldelight {
    VelibDatabase {
        packageName = "com.muhammedsafiulazam.common.database.velib"
    }
}

configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("CommonKit", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode